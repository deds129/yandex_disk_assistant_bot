import io

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.api.yandex_disk_service import login_via_code, login_via_token, create_default_dir, client, DEFAULT_DIR_NAME
from bot.keyboards import inline, reply
from bot.misc import IntegrationsAccessProvider
from bot.misc.states import BotStates

bot = Bot(token=IntegrationsAccessProvider.TG_BOT_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot=bot, storage=MemoryStorage())

buf = io.BytesIO()

@dp.message(CommandStart())
async def start(message: Message, ) -> None:
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç!üëãüèª\n'
                         f'–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫\n'
                         f'–Ø —Å–æ—Ö—Ä–∞–Ω—é –Ω–∞ –î–∏—Å–∫ –≤—Å–µ, —á—Ç–æ —Ç—ã –º–Ω–µ –ø—Ä–∏—à–ª–µ—à—å. \n\n'
                         f'–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é\n'
                         f'–ü–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –∫–æ–¥,'
                         f'–∫–æ—Ç–æ—Ä—ã–π –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏, –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É "–í–≤–µ—Å—Ç–∏ –∫–æ–¥"'
                         , parse_mode='HTML', reply_markup=inline.main_login_inline_keyboard)


@dp.callback_query(F.data == 'request_code')
async def request_code(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:")
    await state.set_state(BotStates.input_code)


@dp.message(BotStates.input_code)
async def get_code(message: Message, state: FSMContext) -> None:
    args_data = message.text
    if args_data:
        code = args_data.strip()
        if code.isdigit():
            await code_login(code, message, state)
        else:
            await token_login(code, message, state)
    else:
        await state.clear()
        await message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã!")


@dp.message(BotStates.ready_to_work, F.photo)
async def download_photo(message: Message, state: FSMContext) -> None:
    await state.set_state(BotStates.ready_to_work)
    download_photo_msg = await message.answer("–°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ...")
    file_name = f"{message.chat.username}_{message.date}".replace(' ', '_')
    file = await bot.download(
        message.photo[-1],
        destination=buf
    )
    await client.upload(file, f"{DEFAULT_DIR_NAME}/{file_name}")

    await download_photo_msg.edit_text("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ –î–∏—Å–∫!")


@dp.message(BotStates.ready_to_work)
async def default_message(message: Message, state: FSMContext) -> None:
    await message.answer("–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ :(")


@dp.message()
async def default_message(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç—É, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é",
                         reply_markup=inline.main_login_inline_keyboard)


async def token_login(code, message, state):
    try:
        is_success_login = await login_via_token(code=code)
        if is_success_login:
            await state.set_state(BotStates.ready_to_work)
            await message.answer('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n'
                                 '–í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!\n'
                                 '–Ø –±—É–¥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ, —á—Ç–æ —Ç—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—à—å –≤ –ø–∞–ø–∫—É '
                                 '<a href="https://disk.yandex.ru/client/disk/from_bot">from_bot</a>'
                                 ' –Ω–∞ —Ç–≤–æ–µ–º –¥–∏—Å–∫–µ',
                                 parse_mode='HTML')
            await create_default_dir()
        else:
            await state.clear()
            await message.answer("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–≤–µ–Ω—á–∞–ª–∞—Å—å —É—Å–ø–µ—Ö–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                                 reply_markup=inline.try_again_input_code)
    except:
        await state.clear()
        await message.answer("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                             reply_markup=inline.try_again_input_code)


async def code_login(code, message, state):
    try:
        is_success_login = await login_via_code(code=code)
        if is_success_login:
            await state.set_state(BotStates.ready_to_work)
            await message.answer("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!"
                                 "–Ø —Å–æ–∑–¥–∞–º –ø–∞–ø–∫—É –Ω–∞ —Ç–≤–æ–µ–º ")
        else:
            await state.clear()
            await message.answer("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–≤–µ–Ω—á–∞–ª–∞—Å—å —É—Å–ø–µ—Ö–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                                 reply_markup=inline.try_again_input_code)
    except:
        await state.clear()
        await message.answer("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                             reply_markup=inline.try_again_input_code)


async def start_bot():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
