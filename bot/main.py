import io
import tempfile

import yadisk
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.api.yandex_disk_service import login_via_code, login_via_token, create_save_dir, client, DEFAULT_DIR_NAME
from bot.keyboards import inline
from bot.misc import IntegrationsAccessProvider
from bot.misc.states import BotStates

bot = Bot(token=IntegrationsAccessProvider.TG_BOT_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot=bot, storage=MemoryStorage())
save_dir = DEFAULT_DIR_NAME

buf = io.BytesIO()

@dp.message(CommandStart())
async def start(message: Message, ) -> None:
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç!üëãüèª\n'
                         f'–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫\n'
                         f'–Ø —Å–æ—Ö—Ä–∞–Ω—é –Ω–∞ –î–∏—Å–∫ –≤—Å–µ, —á—Ç–æ —Ç—ã –º–Ω–µ –ø—Ä–∏—à–ª–µ—à—å. \n\n',
                         parse_mode="HTML")
    await message.answer(f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é',
                         parse_mode='HTML',
                         reply_markup=inline.main_login_inline_keyboard)


@dp.callback_query(F.data == 'request_code')
async def request_code(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:")
    await state.set_state(BotStates.input_code)


@dp.message(BotStates.input_code)
async def get_code(message: Message, state: FSMContext) -> None:
    args_data = message.text
    if args_data:
        code = args_data.strip()
        if code.isdigit():
            await code_login(code, message, state)
        else:
            await token_login(code, message, state)
    else:
        await state.clear()
        await message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã!")


@dp.callback_query(F.data == 'change_save_path')
async def change_save_path(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:")
    await state.set_state(BotStates.change_save_dir)


@dp.message(BotStates.change_save_dir)
async def change_save_dir(message: Message, state: FSMContext) -> None:
    args_data = message.text.strip()
    global save_dir
    try:
        await create_save_dir(save_path=args_data)
        await message.answer("–§–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–Ω—è—Ç—å—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–ø–∫–µ:\n"
                             f"<a href='https://disk.yandex.ru/client/disk/{args_data}'>{args_data}</a>",
                             parse_mode="HTML")
        save_dir = args_data
    except yadisk.exceptions.YaDiskError:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/—Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!",
                             reply_markup=inline.edit_save_path)
    await state.set_state(BotStates.ready_to_work)


@dp.message(BotStates.ready_to_work, F.photo)
async def download_photo(message: Message, state: FSMContext) -> None:
    await state.set_state(BotStates.ready_to_work)
    download_photo_msg = await message.answer("–°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ...")
    msg_datetime = message.date.strftime('%m-%d-%y %H:%M:%S')
    file_name = f"picture_{message.chat.username}_{msg_datetime}".replace(' ', '_')
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        try:
            await bot.download(
                message.photo[-1],
                destination=temp_file.name,
                timeout=120
            )
            temp_file.flush()

            await client.upload(temp_file.name, f"{save_dir}/{file_name}.jpg")
            await download_photo_msg.edit_text("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ –î–∏—Å–∫!")
        except yadisk.exceptions.YaDiskError as e:
            await download_photo_msg.edit_text(
                "–ü–æ–∫–∞ —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫! –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–∑–∂–µ\n"
                f"{str(e)}")
        except Exception as e:
            await download_photo_msg.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")
        finally:
            temp_file.close()


@dp.message(BotStates.ready_to_work, F.video)
async def download_video(message: Message, state: FSMContext) -> None:
    await state.set_state(BotStates.ready_to_work)
    download_video_msg = await message.answer("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
    msg_datetime = message.date.strftime('%m-%d-%y %H:%M:%S')
    file_name = f"video_{message.chat.username}_{msg_datetime}".replace(' ', '_')
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await bot.download(
                file=message.video,
                destination=temp_file.name,
                timeout=600
            )
            temp_file.flush()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –±—É—Ñ–µ—Ä –Ω–∞ –¥–∏—Å–∫

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
            await client.upload(temp_file.name, f"{save_dir}/{file_name}.mp4")
            await download_video_msg.edit_text("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ –î–∏—Å–∫!")
        except yadisk.exceptions.YaDiskError as e:
            await download_video_msg.edit_text("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫! –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–∑–∂–µ\n"
                                               f"{str(e)}")
        except Exception as e:
            await download_video_msg.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {str(e)}")
        finally:
            temp_file.close()

@dp.message(BotStates.ready_to_work)
async def default_message(message: Message, state: FSMContext) -> None:
    await message.answer("–ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è :(")


@dp.message()
async def default_message(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ –º–Ω–æ–π, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é",
                         reply_markup=inline.main_login_inline_keyboard)


async def token_login(code, message, state):
    try:
        is_success_login = await login_via_token(code=code)
        if is_success_login:
            await state.set_state(BotStates.ready_to_work)
            await create_save_dir(save_path=DEFAULT_DIR_NAME)
            await message.answer('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n'
                                 '–í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!\n'
                                 ' –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, —è —Å–æ—Ö—Ä–∞–Ω—è—é –≤—Å–µ, —á—Ç–æ —Ç—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—à—å –≤ –ø–∞–ø–∫—É '
                                 '<a href="https://disk.yandex.ru/client/disk/from_bot">from_bot</a>'
                                 ' –Ω–∞ —Ç–≤–æ–µ–º –¥–∏—Å–∫–µ.',
                                 reply_markup=inline.edit_save_path,
                                 parse_mode='HTML')
        else:
            await state.clear()
            await message.answer("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–≤–µ–Ω—á–∞–ª–∞—Å—å —É—Å–ø–µ—Ö–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                                 reply_markup=inline.try_again_input_code)
    except yadisk.exceptions.YaDiskError as e:
        await state.clear()
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!\n",
                             e.error_type,
                             reply_markup=inline.try_again_input_code)
    except Exception as e:
        await state.clear()
        await message.answer(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


async def code_login(code, message, state):
    try:
        is_success_login = await login_via_code(code=code)
        if is_success_login:
            await state.set_state(BotStates.ready_to_work)
            await message.answer('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n'
                                 '–í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!\n'
                                 ' –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, —è —Å–æ—Ö—Ä–∞–Ω—è—é –≤—Å–µ, —á—Ç–æ —Ç—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—à—å –≤ –ø–∞–ø–∫—É '
                                 '<a href="https://disk.yandex.ru/client/disk/from_bot">from_bot</a>'
                                 ' –Ω–∞ —Ç–≤–æ–µ–º –¥–∏—Å–∫–µ.',
                                 reply_markup=inline.change_save_path,
                                 parse_mode='HTML')
        else:
            await state.clear()
            await message.answer("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–≤–µ–Ω—á–∞–ª–∞—Å—å —É—Å–ø–µ—Ö–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                                 reply_markup=inline.try_again_input_code)
    except yadisk.exceptions.YaDiskError as e:
        await state.clear()
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!\n",
                             e.error_type,
                             reply_markup=inline.try_again_input_code)
    except Exception as e:
        await state.clear()
        await message.answer(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


async def start_bot():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
